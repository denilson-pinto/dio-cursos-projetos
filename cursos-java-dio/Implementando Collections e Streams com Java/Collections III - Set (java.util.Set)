

Aprenda sobre as implementações de Set


java.util.Set

- Implementações que aprenderemos:

    - java.util.HashSet
    - java.util.TreeSet
    - java.util.LinkedHashSet

- Por padrão, não garante ordem

- Não permite itens repetidos

- Permite adição e remoção normalmente. Não possui busca por item e atualização. Para leitura, apenas navegação.

- Não permite mudança de ordenação


HashSet

- Quando utilizar: quando não é necessário manter uma ordenação

- Ordenação: não é ordenado e não permite valores repetidos

- Performance: por não ter repetição de valores e não ser ordenado é a implementação mais performática

-------------------------------------------------------------------------------------------------------------------------------------

LinkedHashSet

- Quando utilizar: quando é necessário manter a ordem de inserção dos elementos

- Ordenação: mantém a ordem de inserção dos elementos

- Performance: é a implementação mais lenta por ser necessária manter a ordem

-------------------------------------------------------------------------------------------------------------------------------------

TreeSet

- Quando utilizar: quando é necessário alterar a ordem através do uso de comparators

- Ordenação: mantém ordem e pode ser reordenado

- Performance: é performático na leitura. Para modificação tem a necessidade de reordenar, sendo mais lento que o LinkedHashSet


||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||


Exercício final:

1 - Crie um set e execute as seguintes operações:

- Adicione 5 números inteiros: 3, 88, 20, 44, 3.
- Navegue no Set exibindo cada número no console.
- Remova o primeiro item do Set.
- Adicione um novo número no Set: 23.
- Verifique o tamanho do Set.
- Verifique se o Set está vazio.


