

OBJETIVOS DA AULA:

1. Por que testar software ?
2. Como testar software ?
3. Até quando testar ?

|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

POR QUE TESTAR SOFTWARE ?
 
CARREIRA QUALITY ASSURANCE

Nas últimas décadas o usuário se tornou cada vez mais exigente. Por isso as empresas aprenderam que a satisfação do usuário é o ponto central para o sucesso de uma organização. Resultando no crescimento significativo da área de QA no mercado nos últimos anos.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

O QUE É TESTE DE SOFTWARE ?

É um processo que faz parte do ciclo de vida do software e tem como principal objetivo avaliar a qualidade do software e reduzir o risco de falha no software em operação.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

QUANTO PODE CUSTAR UM BUG ?

Os bugs são inevitáveis no desenvolvimento de um produto. Por isso, existem diversas técnicas de desenvolvimento e processos de controle de qualidade realizados durante o ciclo de desenvolvimento de software que buscam evitar que um erro afete a experiência e confiança do usuário na aplicação.

A desculpa de não testar o software é que teste custa caro, mas Pressman já apresentou em seu livro de Engenharia de Software que o custo do defeito é progressivo, ou seja, encontrar o defeito na fase de engenharia de requisitos custa 1 enquanto encontrar o defeito durante a fase de produção custa 100 vezes mais, então utilizar o teste reduz custo e não aumenta.

* Exemplo 1: ARIANE 5 501 (1996)
A explosão no vôo de estréia do foguete Ariane 5, em 1996, causou uma perda de US$ 370 milhões. É um caso clássico das proporções que um erro de software pode tomar.


* Exemplo 2: A (QUASE!) 3ª GUERRA MUNDIAL (1983)
Um bug no software soviético falhou ao detectar reflexos solares como falsos mísseis. Seria o fim da humanidade.


* Exemplo 3: BUG DO MILÊNIO
O desastre de um homem é a fortuna de outro, como demonstra o Bug do Milênio. Empresas gastaram bilhões com programadores para corrigir uma falha no software legado. Embora nenhuma falha significativa ocorreu, a preparação para o Bug do Milênio teve um custo significativo e impacto no tempo em todas as indústrias que usam a tecnologia computacional.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

PRINCÍPIOS DE TESTES DE SOFTWARE

* O teste mostra a presença de defeitos e não a sua ausência

* Testes exaustivos são impossíveis

* O teste inicial economiza tempo e dinheiro 

* Cuidado com o paradoxo do pesticida

* O teste depende do contexto 

* Ausência de erros é uma ilusão

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

EXERCÍCIOS

1) Qual o custo de um bug na fase de entrega do software ao usuário final ?

a. ( ) Custo 10
b. ( ) Custo 0,10
c. ( ) Custo 1
d. (X) Custo 100


2) É correto afirmar que:

a. (X) Quanto antes um defeito é encontrado, mais barato sai a sua resolução.
b. ( ) Um defeito encontrado na fase de teste é mais barato para se arrumar que um defeito encontrado na fase de análise.
c. ( ) A fase em que o sistema é disponibilizado para o usuário é sempre a ideal para se procurar erros, pois cada erro terá baixo custo para sua resolução.
d. ( ) Quando o cliente encontra um erro ele sempre fica feliz.


